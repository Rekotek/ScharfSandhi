program sandhigen;	uses		chararyroutines, transliterate, sandhiprep, sandhiline;	label		9000;	const		freq = 1000;	{12..783360}		ampl = 255;	{0..255}		duration = 10;	{0..255}	var		Linary: linetype;		Index, IEnd, PNum, FieldNum: integer;		PratNum: longint;		Found: boolean;	var		FldChr, NxtFldChr: char;		FNamIn, FNamOut, FileIn, FileOut: string;		ILastColon, Field, L: integer;	procedure fieldoptions;		const			maxfields = 20;		var			Answer: string;	begin	FieldNum := 0;	Answer := '';{Select fields}	writeln('Perform sandhi on the whole document or just on certain fields?');	writeln('0:  (Default) Whole document');	writeln('1:  First field only');	writeln('2:  Second field only');	writeln('3:  etc.');	write('Enter: ');	readln(Answer);	if Answer = '' then		Answer := '0';	Field := ord(Answer[1]) - 48;	if (Field < 0) or (Field > maxfields) then begin	{not an option so quit}		Error := 5;		exit(fieldoptions);		end	else if (Field > 0) and (Field < maxfields) then begin	{specify field chars}		writeln('Assume field boundary marking field beginning is a tab');		write('Or enter a single character now: ');		readln(Answer);		L := length(Answer);		if L = 0 then	{default is tab}		else if L = 1 then			FldChr := Answer[1]		else begin	{quit}			Error := 5;			exit(fieldoptions);			end;		writeln('If a different character marks the end of the field,');		write('Enter it now: ');		readln(Answer);		L := length(Answer);		if L = 0 then			NxtFldChr := FldChr	{if whole its CR default for 1 field its tab}		else if L = 1 then			NxtFldChr := Answer[1]		else begin	{quit}			Error := 5;			exit(fieldoptions);			end;		end;	{specify field chars}	end;	{fieldoptions}begin	{sandhigen}{Open the Input and Output files}FNamIn := '';FNamOut := '';FileIn := '';FileOut := '';IEnd := 0;hideall;showtext;writeln('Sandhi');writeln('Copyright © 1992 by Peter M. Scharf');write('Choose the file to which to apply sandhi.');get(Input);FNamIn := OldFileName('Choose the file to which to apply sandhi.');if FNamIn = '' then begin	Error := 4;	goto 9000;	end;IEnd := length(FNamIn);ILastColon := 0;for Index := 1 to IEnd do	if FNamIn[Index] = ':' then		ILastColon := Index;FileIn := copy(FNamIn, ILastColon + 1, IEnd - ILastColon);FileOut := concat(FileIn, 'New');FNamOut := NewFileName('Filename of Samhita Text', FileOut);if FNamOut = '' then begin	Error := 4;	goto 9000;	end;reset(I, FNamIn);open(O, FNamOut);{initializations}for Index := 1 to linmax do	Linary[Index] := ' ';IEnd := 0;fieldoptions;	{FieldNum}if Error <> 0 then	goto 9000;sandhioptions;	{Padbound, Chandas, Compound, External}if Error <> 0 then	goto 9000;aksarasamamnaya;	{load the sets and two-dimensional sound array for the procedure sandhi}gana;	{load the lists: Pradi}sandhiPrepLists;	{exceptions to sandhi for Astadhyayi, words ending in 'c'}repeat	{until end of file}{Reinitialize the Line array}	for Index := 1 to IEnd do		Linary[Index] := ' ';	IEnd := 0;{herehere}{Read the rest of the line from the file into the array Linary and set IEnd to position of last char}	repeat		IEnd := IEnd + 1;		if IEnd > linmax then begin			Error := 1;			goto 9000;			end;		read(I, Linary[IEnd]);	until eoln(I);	get(I);	{Position file pointer at beginning of next line}	sandhi(Linary, FldChr);	if Error <> 0 then		goto 9000;{Write the line with sandhi}	IEnd := lengthary(Linary);	for Index := 1 to IEnd do		write(O, Linary[Index]);	writeln(O);until eof(I);close(I);close(O);9000:case Error of0: 	writeln('Successfully Completed');1: 	writeln('Error: line length exceeds linmax.');2: 	writeln('Error: No space to insert a character in the line array.  linmax = ', linmax);4: 	writeln('Execution cancelled.');5: 	writeln('This program operates on the whole document or up to 20 fields.  Execution cancelled.');otherwise	writeln('Error: ', Error);end;note(freq, ampl, duration);end.