unit sandhiprep;interface	uses		chararyroutines, transliterate;	{transliterate declares the Sanskrit sound constants}	const		cantamax = 27;	type		padatype = string[pratipadmax];	var		CAntaPadary: array[1..cantamax] of string[10];		Compound: boolean;	procedure sandhiPrepLists;	procedure sandhiPrep (var Linary: linetype; var Index: lenrangeE; var PurvaPada, Pada1, Pada2: padatype; var NoStoh, NoKNam, Exception, Pronoun, CloseSandhi: boolean);implementation	procedure sandhiPrepLists;	begin	CAntaPadary[1] := 'aqac';	CAntaPadary[2] := 'Awac';	CAntaPadary[3] := 'Alac';	CAntaPadary[4] := 'ec';	CAntaPadary[5] := 'Ac';	CAntaPadary[6] := 'ic';	CAntaPadary[7] := 'ilac';	CAntaPadary[8] := 'izRuc';	CAntaPadary[9] := 'Irac';	CAntaPadary[10] := 'ktic';	CAntaPadary[11] := 'KizRuc';	CAntaPadary[12] := 'Wac';	CAntaPadary[13] := 'Rac';	CAntaPadary[14] := 'tfc';	CAntaPadary[15] := 'daGnac';	CAntaPadary[16] := 'dvayasac';	CAntaPadary[17] := 'dvyac';	CAntaPadary[18] := 'nAwac';	CAntaPadary[19] := 'biqac';	CAntaPadary[20] := 'birIsac';	CAntaPadary[21] := 'mAtrac';	CAntaPadary[22] := 'yAc';	CAntaPadary[23] := 'vuc';	CAntaPadary[24] := 'vfc';	CAntaPadary[25] := 'SaNkawac';	CAntaPadary[26] := 'SAlac';	CAntaPadary[27] := 'zWac';	end;	procedure sandhiPrep;		var			L: lenrange0;			IPada: lenrangeE;			NoPrep, NoSpace: boolean;	begin	NoStoh := false;	NoKNam := false;	NoPrep := false;	Exception := false;	CloseSandhi := false;	Pronoun := true;	{saú is usually the pronoun tad}	L := length(Pada1);	if (L = 1) then	else if (L > 1) then		case Pada1[L] of		sktc: 			for IPada := 1 to cantamax do				if Pada1 = CAntaPadary[IPada] then begin					NoPrep := true;					NoStoh := true;					leave;					end;		sktj: 			if (Pada1 = 'tij') then				Exception := true			else if (Pada1 = 'tuj') then				NoPrep := true;		sktcn: 			if (Pada1 = 'aY') or (Pada1 = 'alaNkfY') or (Pada1 = 'nirAkfY') or (Pada1 = 'naY') or (Pada1 = 'wIwaY') or (Pada1 = 'WaY') then				NoStoh := true;		sktretron: 			if (Pada1 = 'aR') or (Pada1 = 'uR') or (Pada1 = 'yaR') then				Exception := true;		sktdh: 			if (Pada1 = 'aD') or (Pada1 = 'ruD') then				Exception := true;		sktn: 			if (Pada1 = 'Wan') or (Pada1 = 'tran') or (Pada1 = 'dozan') or (Pada1 = 'yakan') or (Pada1 = 'yUzan') or (Pada1 = 'Sakan') or (Pada1 = 'zWan') or (Pada1 = 'han') then				NoPrep := true			else if (Pada1 = 'Ayan') or (Pada1 = 'Gan') then begin				NoPrep := true;				NoKNam := true;				end			else if (Pada1 = 'ktin') or (Pada1 = 'kvin') or (Pada1 = 'min') or (Pada1 = 'vin') then				NoPrep := true			else if (Pada1 = 'an') or (Pada1 = 'in') or (Pada1 = 'kan') or (Pada1 = 'kaDyEn') or (Pada1 = 'qvun') or (Pada1 = 'tan') or (Pada1 = 'dAn') or (Pada1 = 'man') or (Pada1 = 'vun') then				Exception := true			else if Pada1 = 'tumun' then				NoStoh := true;		sktm: 			if (Pada1 = 'am') or (Pada1 = 'Am') or (Pada1 = 'num') then				Exception := true			else if Compound then				if ((Pada1 = 'puram') and (Pada2 = 'dArO')) then	{purandŒrau}					CloseSandhi := true;		skty: 			if (Pada1 = 'ay') or (Pada1 = 'Ay') then				Exception := true;		sktr: 			if (Pada1 = 'car') or (Pada1 = 'kur') or (Pada1 = 'Sar') then				Exception := true;		sktsch: 			if (Pada1 = 'eS') or (Pada1 = 'KaS') or (Pada1 = 'jaS') or (Pada1 = 'niS') then				Exception := true;		sktsh: 			if (Pada1 = 'Jaz') or (Pada1 = 'Baz') then				Exception := true;		skts: 			if (Pada1 = 'as') or (Pada1 = 'atus') or (Pada1 = 'aTus') or (Pada1 = 'is') or (Pada1 = 'us') or (Pada1 = 'os') or (Pada1 = 'kas') or (Pada1 = 'kAs') or (Pada1 = 'Nas') or (Pada1 = 'tas') or (Pada1 = 'tAs') or (Pada1 = 'TAs') or (Pada1 = 'Bis') or (Pada1 = 'Byas') then				Exception := true;		otherwise		end;	{case}	if Compound then		{normal stem changes}		if not Exception and not NoPrep then			case Linary[Index - 1] of			sktc: 				if Pada1 = 'aYc' then begin	{aYc}					Linary[Index - 1] := sktk;	{ak}					deletary(Linary, Index - 2);					Index := Index - 1					end	{aYc}				else					Linary[Index - 1] := sktk;			sktch: 				Linary[Index - 1] := sktk;			sktj: 				if (Pada1 = 'rAj') then					Linary[Index - 1] := sktretrot				else					Linary[Index - 1] := sktk;			sktjh: 				Linary[Index - 1] := sktk;			sktn: 				if Index > 2 then begin					if (Linary[Index - 2] = skta) or (Linary[Index - 2] = skti) then begin	{an-/in-}						if ((Pada1 = 'ahan') and (PurvaPada <> 'eka')) then						else begin	{normal 'an-'/'in-'}							deletary(Linary, Index - 1);							Index := Index - 1;							end;						end	{an-/in-}					end;			sktr: 				if (Pada1 = 'pur') or (Pada1 = 'Dur') then					Linary[Index - 2] := sktuu;			sktsch: 				if Pada1 = 'viS' then					Linary[Index - 1] := sktretrot				else					Linary[Index - 1] := sktk;			sktsh: 				if Pada1 = 'daDfz' then					Linary[Index - 1] := sktk;			skts: 				if (Pada1 = 'ASis') then					Linary[Index - 2] := sktii	{82104}				else if Pada1 = 'pums' then begin	{'pum'}					deletary(Linary, Index - 1);					Index := Index - 1;					end;	{'pum'}			otherwise	{no preparation necessary, normal sandhi will follow}			end;	{case statement}	end;	{astadhyayiSandhiPrep}end.	{sandhiprep}