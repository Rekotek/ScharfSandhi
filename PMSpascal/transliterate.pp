unit transliterate;	{includes My Sanskrit01, Jerome's South Asia Times and Cardona's MyHindustan, and the Jaipur character set}interface	const{Neutral characters}		return = chr(13);		tab = '	';		space = ' ';		hyphen = '-';		comma = ',';		semicolon = ';';		colon = ':';		period = '.';		star = '*';		slash = '/';		openparen = '(';		closeparen = ')';{The characters in Jerome's South Asia Times font}		sata = 'a';		sataa = 'å';	{opt a}		sati = 'i';		satii = '^';	{opt i}		satu = 'u';		satuu = '¨';	{opt u}		satri = '®';	{opt r}		satrii = '´';	{opt e space}		satlri = '¬';	{opt l}		sate = 'e';		sato = 'o';		satvisarga = '˙';	{opt h}		satX = 'X';	{Xk=jihvamuliya, Xp=upadhmaniya}		satanusvara = '≤';	{opt ,}		satanunasika = 'µ';	{opt m}		satmacron = 'œ';		satavagraha = '''';		satroot = 'Ú';		satnasalization = '~';	{precedes the sound it nazalizes}		satudatta = '$';	{dead key preceding the vowel it accents}		satlongudatta = '⁄';	{shift option 1: dead key preceding the vowel it accents}		satsvarita = '@';	{dead key preceding the sound it accents}		satlongsvarita = 'Ÿ';	{shift option `: dead key preceding the sound it accents}		satudattaa = 'á';		satudattai = 'í';		satudattau = 'ú';		satudattae = 'é';		satudattao = 'ó';		satsvaritaa = 'à';		satsvaritai = 'ì';		satsvaritau = 'ù';		satsvaritae = 'è';		satsvaritao = 'ò';		satk = 'k';		satg = 'g';		satkn = '∫';	{opt b}		satc = 'c';		satj = 'j';		satcn = 'ñ';	{opt n n}		satretrot = '†';	{opt t}		satretrod = '∂';	{opt d}		satretron = 'ˆ';	{shift opt n}		satt = 't';		satd = 'd';		satn = 'n';		satp = 'p';		satb = 'b';		satm = 'm';		saty = 'y';		satr = 'r';		satl = 'l';		satv = 'v';		satsch = 'ß';	{opt s}		satsh = 'Ω';	{opt z}		sats = 's';		sath = 'h';{The characters in the Hindustan font}		hinda = 'a';		hindaa = 'å';	{opt a}		hindi = 'i';		hindii = '^';	{opt i}		hindu = 'u';		hinduu = '¨';	{opt u}		hindri = '®';	{opt r}		hindrii = '´';	{opt e	In swiss dia opt f}		hindlri = '¬';	{opt l}		hindlrii = '≥';	{not in hindustan	In swiss dia opt .}		hinde = 'e';		hindo = 'o';		hindvisarga = '˙';	{opt h}		hindX = 'X';	{Xk=jihvamuliya, Xp=upadhmaniya}		hindanusvara = '≤';	{opt ,	Cardona uses opt m}		hindanunasika = 'µ';	{opt m	Cardona uses opt ,}		hindavagraha = '''';		hindroot = 'Ú';		hindudatta = '«';	{opt \: dead key preceding the vowel it accents}		hindraisedudatta = '»';	{shift option \: dead key preceding the vowel it accents}		hindsvarita = '`';	{opt e sp or `}		hindudattaa = 'á';		hindudattai = 'í';		hindudattau = 'ú';		hindudattae = 'é';		hindudattao = 'ó';		hindsvaritaa = 'à';		hindsvaritai = 'ì';		hindsvaritau = 'ù';		hindsvaritae = 'è';		hindsvaritao = 'ò';		hindk = 'k';		hindg = 'g';		hindkn = '√';	{opt v}		hindc = 'c';		hindj = 'j';		hindcn = '~';	{opt n space}		hindretrot = '†';	{opt t}		hindretrod = '∂';	{opt d}		hindretron = '∫';	{opt b}		hindt = 't';		hindd = 'd';		hindn = 'n';		hindp = 'p';		hindb = 'b';		hindm = 'm';		hindy = 'y';		hindr = 'r';		hindl = 'l';		hindv = 'v';		hindsch = 'ß';	{opt s}		hindsh = 'Ω';	{opt z}		hinds = 's';		hindh = 'h';{The Sanskrit sounds represented in the font Sanskrit01}		skta = 'a';		sktaa = 'A';		skti = 'i';		sktii = 'I';		sktu = 'u';		sktuu = 'U';		sktri = 'f';		sktrii = 'F';		sktlri = 'x';		sktlrii = 'X';		skte = 'e';		sktai = 'E';		skto = 'o';		sktau = 'O';		sktvisarga = 'H';		sktjihvamuliya = '˚';	{opt k}		sktupadhmaniya = 'π';	{opt p}		sktanusvara = 'M';		sktanunasika = 'µ';	{opt m.  It should follow the sound it nasalizes}		sktnasalization = '~';	{shift `.  It precedes the sound it nazalizes}		sktavagraha = '''';		sktroot = '√';	{opt v}		sktudatta = '´';	{opt e space.  It precedes the sound it accents}		sktsvarita = '^';	{opt i space.  It precedes the sound it accents}		sktudattaa = 'á';		sktudattai = 'í';		sktudattau = 'ú';		sktudattae = 'é';		sktudattao = 'ó';		sktudattaaa = 'Á';		sktudattaii = 'Í';		sktudattauu = 'Ú';		sktudattaai = 'É';		sktudattaau = 'Ó';		sktsvaritaa = 'â';		sktsvaritai = 'î';		sktsvaritau = 'û';		sktsvaritae = 'ê';		sktsvaritao = 'ô';		sktsvaritaaa = 'Â';		sktsvaritaii = 'Î';		sktsvaritauu = 'Û';		sktsvaritaai = 'Ê';		sktsvaritaau = 'Ô';		sktk = 'k';		sktkh = 'K';		sktg = 'g';		sktgh = 'G';		sktkn = 'N';		sktc = 'c';		sktch = 'C';		sktj = 'j';		sktjh = 'J';		sktcn = 'Y';		sktretrot = 'w';		sktretroth = 'W';		sktretrod = 'q';		sktretrodh = 'Q';		sktretron = 'R';		sktt = 't';		sktth = 'T';		sktd = 'd';		sktdh = 'D';		sktn = 'n';		sktp = 'p';		sktph = 'P';		sktb = 'b';		sktbh = 'B';		sktm = 'm';		skty = 'y';		sktr = 'r';		sktl = 'l';		sktv = 'v';		sktsch = 'S';		sktsh = 'z';		skts = 's';		skth = 'h';{jaipur font character set}{independent vowel signs}		jpa = 'å';	{opt a}		jpi = '^';	{opt i, or ^ (shift 6)}		jpii = 'È';	{opt I}		jpu = '¨';	{opt u}		jpuu = 'Ë';	{opt U}		jpri = 'ƒ';	{opt f}		jprii = 'Ï';	{opt F}		jpe = '´';	{opt e}{dependent vowel signs}		jphalfaa = 'a';		jphalfi = 'i';		jphalfii = 'I';		jphalfu = 'u';		jphalfu2 = '&';	{for k, ph}		jphalfuu = 'U';		jphalfuu2 = '*';	{for k, ph}		jphalfri = 'f';		jphalfri2 = 'Z';	{for k, ph}		jphalfrii = 'F';		jphalfrii2 = 'V';	{for k, ph}		jphalfe = 'e';		jphalfe2 = 'w';	{for k, ph}		jphalfai = 'E';		jphalfai2 = 'W';	{for k, ph}		jphalfo = 'o';		jphalfau = 'O';{other signs}		jpavagraha = 'S';		jpvirama = '`';		jpvirama2 = '!';	{for k, ph}		jpvisarga = ':';		jpanusvara = 'M';		jpanusvara2 = '˜';	{opt M}		jpanusvara3 = '#';	{what for?}		jpanunasika = 'Å';	{opt A}		jpcandra = 'A';		jproot = 'Ú';		jpperiod2 = '¿';	{low and to the right, what for?}		jpdanda = '≥';{single consonant signs}		jpka = 'k';		jpkha = 'K';		jpga = 'g';		jpgha = 'G';		jpkna = 'Ÿ';	{opt ~; shift opt `}		jpca = 'c';		jpcha = 'C';		jpja = 'j';		jpjha = 'J';		jpcna = 'X';		jpretrota = 'q';		jpretrotha = 'Q';		jpretroda = '\';		jpretrodha = '|';		jpretrona = 'N';		jpta = 't';		jptha = 'T';		jpda = 'd';		jpdha = 'D';		jpna = 'n';		jppa = 'p';		jppha = 'P';		jpba = 'b';		jpbha = 'B';		jpma = 'm';		jpya = 'y';		jpra = 'r';		jpla = 'l';		jpva = 'v';		jpscha = 'x';		jpsha = 'z';		jpsa = 's';		jpha = 'h';{conjunct consonant-vowel forms}		jpru = '<';	{shift ,}		jpruu = '>';	{shift .}		jpdri = '{';	{shift [}		jpdrii = '}';	{shift ]}		jphri = 'H';{conjunct initial consonant signs}		jphalfk = '˚';	{opt k}		jphalfkh = '';	{opt K}		jphalfg = '©';	{opt g}		jphalfgh = 'Ì';	{opt G}		jphalfc = 'ç';	{opt c}		jphalfj = '∆';	{opt j}		jphalfjh = 'Ô';	{opt J}		jphalfcn = 'Ù';	{opt X}		jphalfretron = 'ˆ';	{opt N}		jphalft = '†';	{opt t}		jphalfth = 'Ê';	{opt T}		jphalfdh = 'Î';	{opt D}		jphalfn = '~';	{shift ` or opt n sp}		jphalfp = 'π';	{opt p}		jphalfph = '∏';	{opt P}		jphalfb = '∫';	{opt b}		jphalfbh = 'ı';	{opt B}		jphalfm = 'µ';	{opt m}		jphalfy = '¥';	{opt y}		jpraisedr = 'R';		jpraisedr2 = '%';	{for k etc., shift 5}		jphalfl = '¬';	{opt l}		jphalfv = '√';	{opt v}		jphalfsch = '≈';	{opt x}		jphalfsh = 'Ω';	{opt z}		jphalfs = 'ß';	{opt s}{conjunct initial conjuncted consonants}		jphalfksh = '∑';	{opt w}		jphalfjcn = 'Ó';	{opt H}		jphalftt = '≠';	{opt =}		jphalftr = '‘';	{opt ]}{conjunct final consonant signs}		jpfinalya = 'Y';		jplowra = '®';	{opt r}		jplowra2 = '∂';	{opt d, after k, ph}		jplowra3 = 'Â';	{opt R, after kn, ch, retro t th d dh,}{conjunct consonant independent forms}		jpksha = 'œ';	{opt q}		jpknka = '⁄';	{shift opt 1}		jpknkha = '€';	{shift opt 2}		jpknga = '‹';	{shift opt 3}		jpkngha = '›';	{shift opt 4}		jpjcna = '˙';	{opt h}		jpretrotretrota = 'ﬁ';	{shift opt 5}		jpretrotretrotha = 'Û';	{shift opt z}		jptta = '–';	{opt -}		jptra = '“';	{opt [}		jpdga = 'Œ';	{opt Q}		jpdgha = '„';	{opt W}		jpdda = '‰';	{opt E}		jpddha = 'Á';	{opt Á}		jpdbha = 'Æ';	{opt "}		jpdma = 'Ø';	{opt O}		jpdya = '”';	{shift opt [}		jpdra = '’';	{shift opt ]}		jpdva = '»';	{shift opt \}		jpschra = 'Ç';	{opt C}		jpsra = 'Í';	{opt S}		jphretrona = 'ﬂ';	{shift opt 6}		jphna = '‡';	{shift opt 7}		jphma = '°';	{shift opt 8}		jphya = '·';	{shift opt 9}		jphra = '‚';	{shift opt 0}		jphla = '—';	{shift opt -}		jphva = '±';	{shift opt =}	var		I, O: text;		Error: integer;	procedure sktaccentsep (NxtFldChr: char);	procedure tSATSkt (NxtFldChr: char);	procedure tSktSAT (NxtFldChr: char);	procedure tHindSkt (NxtFldChr: char);	procedure tSktHind (NxtFldChr: char);implementation	procedure sktaccentsep(NxtFldChr: char);	begin	while not (I^ = NxtFldChr) and not eoln(I) do begin{accents}		case I^ of		sktudattaa: 			write(O, sktudatta, skta);		sktudattai: 			write(O, sktudatta, skti);		sktudattau: 			write(O, sktudatta, sktu);		sktudattae: 			write(O, sktudatta, skte);		sktudattao: 			write(O, sktudatta, skto);		sktudattaaa: 			write(O, sktudatta, sktaa);		sktudattaii: 			write(O, sktudatta, sktii);		sktudattauu: 			write(O, sktudatta, sktuu);		sktudattaai: 			write(O, sktudatta, sktai);		sktudattaau: 			write(O, sktudatta, sktau);		sktsvaritaa: 			write(O, sktsvarita, skta);		sktsvaritai: 			write(O, sktsvarita, skti);		sktsvaritau: 			write(O, sktsvarita, sktu);		sktsvaritae: 			write(O, sktsvarita, skte);		sktsvaritao: 			write(O, sktsvarita, skto);		sktsvaritaaa: 			write(O, sktsvarita, sktaa);		sktsvaritaii: 			write(O, sktsvarita, sktii);		sktsvaritauu: 			write(O, sktsvarita, sktuu);		sktsvaritaai: 			write(O, sktsvarita, sktai);		sktsvaritaau: 			write(O, sktsvarita, sktau);		otherwise			write(O, I^)	{if the character is not in the table write it out as it came in}		end;	{case}		get(I);		end;	{loop}	end;	{sktaccentsep}	procedure tSATSkt;{Looking at one character at a time in South Asia Times Font}{transliterates it into Sanskrit}		var			Chr: char;			UdattaVowels, SvaritaVowels: set of char;	begin	UdattaVowels := [satudattaa, satudattai, satudattau, satudattae, satudattao];	SvaritaVowels := [satsvaritaa, satsvaritai, satsvaritau, satsvaritae, satsvaritao];	while not (I^ = NxtFldChr) and not eoln(I) do begin	{process chars in field only, not FldChr}		read(I, Chr);		if Chr in UdattaVowels then begin	{udatta vowels}			write(O, sktudatta);			case Chr of			satudattaa: 				Chr := sata;			satudattai: 				Chr := sati;			satudattau: 				Chr := satu;			satudattae: 				Chr := sate;			satudattao: 				Chr := sato;			end;	{case}			end	{udatta vowels}		else if Chr in SvaritaVowels then begin	{svarita vowels}			write(O, sktsvarita);			case Chr of			satsvaritaa: 				Chr := sata;			satsvaritai: 				Chr := sati;			satsvaritau: 				Chr := satu;			satsvaritae: 				Chr := sate;			satsvaritao: 				Chr := sato;			end;	{case}			end;	{svarita vowels}		case Chr of		satmacron: 			if eoln(I) then begin				Error := 3;				exit(tSATSkt);				end			else begin	{satmacron}				read(I, Chr);				case Chr of				sata: 					write(O, sktaa);				sati: 					write(O, sktii);				satu: 					write(O, sktuu);				satri: 					write(O, sktrii);				satlri: 					write(O, sktlrii);				otherwise					begin					Error := 2;					exit(tSATSkt);					end;				end;	{case}				end;	{satmacron}		satnasalization: 			write(O, sktnasalization);		satudatta: 			write(O, sktudatta);		satlongudatta: 			if eoln(I) then begin				Error := 3;				exit(tSATSkt);				end			else begin	{satlongudatta}				read(I, Chr);				case Chr of				sata: 					write(O, sktudatta, sktaa);				sati: 					write(O, sktudatta, sktii);				satu: 					write(O, sktudatta, sktuu);				satri: 					write(O, sktudatta, sktrii);				satlri: 					write(O, sktudatta, sktlrii);				otherwise					begin					Error := 2;					exit(tSATSkt);					end;				end;	{case}				end;	{satlongudatta}		satsvarita: 			write(O, sktsvarita);		satlongsvarita: 			if eoln(I) then begin				Error := 3;				exit(tSATSkt);				end			else begin	{longsvarita}				read(I, Chr);				case Chr of				sata: 					write(O, sktsvarita, sktaa);				sati: 					write(O, sktsvarita, sktii);				satu: 					write(O, sktsvarita, sktuu);				satri: 					write(O, sktsvarita, sktrii);				satlri: 					write(O, sktsvarita, sktlrii);				otherwise					begin					Error := 2;					exit(tSATSkt);					end;				end;	{case}				end;	{longsvarita}		sata: 			if eoln(I) then				write(O, skta)			else if I^ in [sati, satu] then begin {aic}				case I^ of				sati: 					write(O, sktai);				satu: 					write(O, sktau);				end;	{case}				get(I);				end	{aic}			else				write(O, skta);		sataa: 			write(O, sktaa);		sati: 			write(O, skti);		satii: 			write(O, sktii);		satu: 			write(O, sktu);		satuu: 			write(O, sktuu);		satri: 			write(O, sktri);		satrii: 			write(O, sktrii);		satlri: 			write(O, sktlri);		sate: 			write(O, skte);		sato: 			write(O, skto);		satvisarga: 			write(O, sktvisarga);		satanusvara: 			write(O, sktanusvara);		satanunasika: 			write(O, sktanunasika);		satX: 			begin {jihvamuliya, upadhmaniya}			if eoln(I) then begin				Error := 3;				exit(tSATSkt);				end;			case I^ of			satk: 				begin				write(O, sktjihvamuliya);	{write the jihvamuliya then cycle to case statement for the following k, kh, p, ph}				cycle;				end;			satp: 				begin				write(O, sktupadhmaniya);				cycle;				end;			space: 				begin	{Xspace}				get(I);				if eoln(I) then begin					Error := 3;					exit(tSATSkt);					end;				case I^ of				satk: 					begin					write(O, sktjihvamuliya, space);	{write the jihvamuliya then cycle to case statement for the following k, kh, p, ph}					cycle;					end;				satp: 					begin					write(O, sktupadhmaniya, space);					cycle;					end;				otherwise					begin					Error := 2;					exit(tSATSkt);					end				end;	{case}				end;	{Xspace}			otherwise				begin				Error := 2;				exit(tSATSkt);				end			end;	{case}			end;	{jihvamuliya, upadhmaniya}		satavagraha: 			write(O, sktavagraha);		satroot: 			write(O, sktroot);		satk: 			if eoln(I) then				write(O, sktk)			else if I^ = sath then begin {kh}				write(O, sktkh);				get(I);				end	{kh}			else				write(O, sktk);		satg: 			if eoln(I) then				write(O, sktg)			else if I^ = sath then begin {gh}				write(O, sktgh);				get(I);				end	{gh}			else				write(O, sktg);		satkn: 			write(O, sktkn);		satc: 			if eoln(I) then				write(O, sktc)			else if I^ = sath then begin	{ch}				write(O, sktch);				get(I);				end			else				write(O, sktc);		satj: 			if eoln(I) then				write(O, sktj)			else if I^ = sath then begin	{jh}				write(O, sktjh);				get(I);				end			else				write(O, sktj);		satcn: 			write(O, sktcn);		satretrot: 			if eoln(I) then				write(O, sktretrot)			else if I^ = sath then begin	{retroth}				write(O, sktretroth);				get(I);				end			else				write(O, sktretrot);		satretrod: 			if eoln(I) then				write(O, sktretrod)			else if I^ = sath then begin	{retrodh}				write(O, sktretrodh);				get(I);				end			else				write(O, sktretrod);		satretron: 			write(O, sktretron);		satt: 			if eoln(I) then				write(O, sktt)			else if I^ = sath then begin	{th}				write(O, sktth);				get(I);				end			else				write(O, sktt);		satd: 			if eoln(I) then				write(O, sktd)			else if I^ = sath then begin	{dh}				write(O, sktdh);				get(I);				end			else				write(O, sktd);		satn: 			write(O, sktn);		satp: 			if eoln(I) then				write(O, sktp)			else if I^ = sath then begin	{ph}				write(O, sktph);				get(I);				end			else				write(O, sktp);		satb: 			if eoln(I) then				write(O, sktb)			else if I^ = sath then begin	{bh}				write(O, sktbh);				get(I);				end			else				write(O, sktb);		satm: 			write(O, sktm);		saty: 			write(O, skty);		satr: 			write(O, sktr);		satl: 			write(O, sktl);		satv: 			write(O, sktv);		satsch: 			write(O, sktsch);		satsh: 			write(O, sktsh);		sats: 			write(O, skts);		sath: 			write(O, skth);		otherwise			write(O, Chr);	{if not in table write out what came in}		end;	{South Asia Times character cases}		end;	{loop}	end;	{tSATSkt}	procedure tSktSAT;{Looking at one character at a time in Sanskrit Font}{transliterates it into South Asia Times}		var			Dipthongs, Longvowels, AspStops: set of char;	begin	Dipthongs := [skte, skto, sktai, sktau];	Longvowels := [sktaa, sktii, sktuu, sktrii, sktlrii];	AspStops := [sktkh, sktgh, sktch, sktjh, sktretroth, sktretrodh, sktth, sktdh, sktph, sktbh];	while not (I^ = NxtFldChr) and not eoln(I) do begin{accents}		if I^ in [sktudatta, sktsvarita] then			if I^ = sktudatta then begin	{sktudatta}				get(I);				if eoln(I) then begin					Error := 3;					exit(tSktSAT);					end				else if I^ in Dipthongs + [skta, skti, sktu] then begin	{special udatta vowels}					case I^ of					skta: 						write(O, satudattaa);					skti: 						write(O, satudattai);					sktu: 						write(O, satudattau);					skte: 						write(O, satudattae);					skto: 						write(O, satudattao);					sktai: 						write(O, satudattaa, sati);					sktau: 						write(O, satudattaa, satu);					end;	{case}					get(I);					cycle;					end	{special udatta vowels}				else if I^ in [sktri, sktlri] then					write(O, satudatta)	{write the accent then procede to case statement for the following vowel}				else if I^ in Longvowels then begin					case I^ of					sktaa: 						write(O, satlongudatta, sata);					sktii: 						write(O, satudatta, satii);					sktuu: 						write(O, satlongudatta, satu);					sktrii: 						write(O, satlongudatta, satri);					sktlrii: 						write(O, satlongudatta, satlri);					end;					get(I);					cycle;					end				else begin {udatta followed by nonvowel!}					Error := 2;					exit(tSktSAT);					end;				end	{sktudatta}			else begin	{sktsvarita}				get(I);				if eoln(I) then begin					Error := 3;					exit(tSktSAT);					end				else if I^ in Dipthongs + [skta, skti, sktu] then begin	{special svarita vowels}					case I^ of					skta: 						write(O, satsvaritaa);					skti: 						write(O, satsvaritai);					sktu: 						write(O, satsvaritau);					skte: 						write(O, satsvaritae);					skto: 						write(O, satsvaritao);					sktai: 						write(O, satsvaritaa, sati);					sktau: 						write(O, satsvaritaa, satu);					end;	{case}					get(I);					cycle;					end	{special svarita vowels}				else if I^ in [sktri, sktlri] then					write(O, satsvarita)	{write the accent then procede to case statement for the following vowel}				else if I^ in Longvowels then begin					case I^ of					sktaa: 						write(O, satlongsvarita, sata);					sktii: 						write(O, satlongsvarita, sati);					sktuu: 						write(O, satlongsvarita, satu);					sktrii: 						write(O, satlongsvarita, satri);					sktlrii: 						write(O, satlongsvarita, satlri);					end;					get(I);					cycle;					end				else begin {svarita followed by nonvowel!}					Error := 2;					exit(tSktSAT);					end;				end;	{sktsvarita}		case I^ of		sktnasalization: 			write(O, satnasalization);{aic}		sktai: 			write(O, sata, sati);		sktau: 			write(O, sata, satu);{aspirated stop}		sktkh: 			write(O, satk, sath);		sktgh: 			write(O, satg, sath);		sktch: 			write(O, satc, sath);		sktjh: 			write(O, satj, sath);		sktretroth: 			write(O, satretrot, sath);		sktretrodh: 			write(O, satretrod, sath);		sktth: 			write(O, satt, sath);		sktdh: 			write(O, satd, sath);		sktph: 			write(O, satp, sath);		sktbh: 			write(O, satb, sath);{jihvamuliya, upadhmaniya}		sktjihvamuliya: 			write(O, satX, satk);		sktupadhmaniya: 			write(O, satX, satp);{simple characters}		skta: 			write(O, sata);		sktaa: 			write(O, sataa);		skti: 			write(O, sati);		sktii: 			write(O, satii);		sktu: 			write(O, satu);		sktuu: 			write(O, satuu);		sktri: 			write(O, satri);		sktrii: 			write(O, satrii);		sktlri: 			write(O, satlri);		sktlrii: 			write(O, satmacron, satlri);		skte: 			write(O, sate);		skto: 			write(O, sato);		sktvisarga: 			write(O, satvisarga);		sktanusvara: 			write(O, satanusvara);		sktanunasika: 			write(O, satanunasika);		sktavagraha: 			write(O, satavagraha);		sktroot: 			write(O, satroot);		sktk: 			write(O, satk);		sktg: 			write(O, satg);		sktkn: 			write(O, satkn);		sktc: 			write(O, satc);		sktj: 			write(O, satj);		sktcn: 			write(O, satcn);		sktretrot: 			write(O, satretrot);		sktretrod: 			write(O, satretrod);		sktretron: 			write(O, satretron);		sktt: 			write(O, satt);		sktd: 			write(O, satd);		sktn: 			write(O, satn);		sktp: 			write(O, satp);		sktb: 			write(O, satb);		sktm: 			write(O, satm);		skty: 			write(O, saty);		sktr: 			write(O, satr);		sktl: 			write(O, satl);		sktv: 			write(O, satv);		sktsch: 			write(O, satsch);		sktsh: 			write(O, satsh);		skts: 			write(O, sats);		skth: 			write(O, sath);		otherwise			write(O, I^)	{if the character is not in the table write it out as it came in}		end;	{case}		get(I);		end;	{loop}	end;	{tSktSAT}	procedure tHindSkt;{Looking at one character at a time in Hindustan Font}{transliterates it into Sanskrit}		var			Chr: char;			UdattaVowels, SvaritaVowels: set of char;	begin	UdattaVowels := [satudattaa, satudattai, satudattau, satudattae, satudattao];	SvaritaVowels := [satsvaritaa, satsvaritai, satsvaritau, satsvaritae, satsvaritao];	while not (I^ = NxtFldChr) and not eoln(I) do begin	{process chars in field only, not FldChr}		read(I, Chr);		if Chr in UdattaVowels then begin	{udatta vowels}			write(O, sktudatta);			case Chr of			hindudattaa: 				Chr := hinda;			hindudattai: 				Chr := hindi;			hindudattau: 				Chr := hindu;			hindudattae: 				Chr := hinde;			hindudattao: 				Chr := hindo;			end;	{case}			end	{udatta vowels}		else if Chr in SvaritaVowels then begin	{svarita vowels}			write(O, sktsvarita);			case Chr of			hindsvaritaa: 				Chr := hinda;			hindsvaritai: 				Chr := hindi;			hindsvaritau: 				Chr := hindu;			hindsvaritae: 				Chr := hinde;			hindsvaritao: 				Chr := hindo;			end;	{case}			end;	{svarita vowels}		case Chr of		hindudatta: 			write(O, sktudatta);		hindraisedudatta: 			write(O, sktudatta);		hindsvarita: 			write(O, sktsvarita);		hinda: 			if eoln(I) then				write(O, skta)			else if I^ in [hindi, hindu] then begin {aic}				case I^ of				hindi: 					write(O, sktai);				hindu: 					write(O, sktau);				end;	{case}				get(I);				end	{aic}			else				write(O, skta);		hindaa: 			write(O, sktaa);		hindi: 			write(O, skti);		hindii: 			write(O, sktii);		hindu: 			write(O, sktu);		hinduu: 			write(O, sktuu);		hindri: 			write(O, sktri);		hindrii: 			write(O, sktrii);		hindlri: 			write(O, sktlri);		hinde: 			write(O, skte);		hindo: 			write(O, skto);		hindvisarga: 			write(O, sktvisarga);		hindanusvara: 			write(O, sktanusvara);		hindanunasika: 			write(O, sktanunasika);		hindX: 			begin {jihvamuliya, upadhmaniya}			if eoln(I) then begin				Error := 3;				exit(tHindSkt);				end;			case I^ of			hindk: 				begin				write(O, sktjihvamuliya);	{write the jihvamuliya then cycle to case statement for the following k, kh, p, ph}				cycle;				end;			hindp: 				begin				write(O, sktupadhmaniya);				cycle;				end;			space: 				begin	{Xspace}				get(I);				if eoln(I) then begin					Error := 3;					exit(tHindSkt);					end;				case I^ of				hindk: 					begin					write(O, sktjihvamuliya, space);	{write the jihvamuliya then cycle to case statement for the following k, kh, p, ph}					cycle;					end;				hindp: 					begin					write(O, sktupadhmaniya, space);					cycle;					end;				otherwise					begin					Error := 2;					exit(tHindSkt);					end				end;	{case}				end;	{Xspace}			otherwise				begin				Error := 2;				exit(tHindSkt);				end			end;	{case}			end;	{jihvamuliya, upadhmaniya}		hindavagraha: 			write(O, sktavagraha);		hindroot: 			write(O, sktroot);		hindk: 			if eoln(I) then				write(O, sktk)			else if I^ = hindh then begin {kh}				write(O, sktkh);				get(I);				end	{kh}			else				write(O, sktk);		hindg: 			if eoln(I) then				write(O, sktg)			else if I^ = hindh then begin {gh}				write(O, sktgh);				get(I);				end	{gh}			else				write(O, sktg);		hindkn: 			write(O, sktkn);		hindc: 			if eoln(I) then				write(O, sktc)			else if I^ = hindh then begin	{ch}				write(O, sktch);				get(I);				end			else				write(O, sktc);		hindj: 			if eoln(I) then				write(O, sktj)			else if I^ = hindh then begin	{jh}				write(O, sktjh);				get(I);				end			else				write(O, sktj);		hindcn: 			write(O, sktcn);		hindretrot: 			if eoln(I) then				write(O, sktretrot)			else if I^ = hindh then begin	{retroth}				write(O, sktretroth);				get(I);				end			else				write(O, sktretrot);		hindretrod: 			if eoln(I) then				write(O, sktretrod)			else if I^ = hindh then begin	{retrodh}				write(O, sktretrodh);				get(I);				end			else				write(O, sktretrod);		hindretron: 			write(O, sktretron);		hindt: 			if eoln(I) then				write(O, sktt)			else if I^ = hindh then begin	{th}				write(O, sktth);				get(I);				end			else				write(O, sktt);		hindd: 			if eoln(I) then				write(O, sktd)			else if I^ = hindh then begin	{dh}				write(O, sktdh);				get(I);				end			else				write(O, sktd);		hindn: 			write(O, sktn);		hindp: 			if eoln(I) then				write(O, sktp)			else if I^ = hindh then begin	{ph}				write(O, sktph);				get(I);				end			else				write(O, sktp);		hindb: 			if eoln(I) then				write(O, sktb)			else if I^ = hindh then begin	{bh}				write(O, sktbh);				get(I);				end			else				write(O, sktb);		hindm: 			write(O, sktm);		hindy: 			write(O, skty);		hindr: 			write(O, sktr);		hindl: 			write(O, sktl);		hindv: 			write(O, sktv);		hindsch: 			write(O, sktsch);		hindsh: 			write(O, sktsh);		hinds: 			write(O, skts);		hindh: 			write(O, skth);		otherwise			write(O, Chr);	{if not in table write out what came in}		end;	{Hindustan character cases}		end;	{loop}	end;	{tHindSkt}	procedure tSktHind;{Looking at one character at a time in Sanskrit Font}{transliterates it into MyHindustan}		var			Dipthongs, Longvowels, AspStops: set of char;	begin	Dipthongs := [skte, skto, sktai, sktau];	Longvowels := [sktaa, sktii, sktuu, sktrii, sktlrii];	AspStops := [sktkh, sktgh, sktch, sktjh, sktretroth, sktretrodh, sktth, sktdh, sktph, sktbh];	while not (I^ = NxtFldChr) and not eoln(I) do begin{accents}		if I^ in [sktudatta, sktsvarita] then			if I^ = sktudatta then begin	{sktudatta}				get(I);				if eoln(I) then begin					Error := 3;					exit(tSktHind);					end				else if I^ in Dipthongs + [skta, skti, sktu] then begin	{special udatta vowels}					case I^ of					skta: 						write(O, hindudattaa);					skti: 						write(O, hindudattai);					sktu: 						write(O, hindudattau);					skte: 						write(O, hindudattae);					skto: 						write(O, hindudattao);					sktai: 						write(O, hindudattaa, hindi);					sktau: 						write(O, hindudattaa, hindu);					end;	{case}					get(I);					cycle;					end	{special udatta vowels}				else if I^ in [sktri, sktlri] then					write(O, hindudatta)	{write the accent then proceed to case statement for the following vowel}				else if I^ in Longvowels then					write(O, hindraisedudatta)	{write the accent then proceed to case statement for the following vowel}				else begin {udatta followed by nonvowel!}					Error := 2;					exit(tSktHind);					end;				end	{sktudatta}			else begin	{sktsvarita}				get(I);				if eoln(I) then begin					Error := 3;					exit(tSktHind);					end				else if I^ in Dipthongs + [skta, skti, sktu] then begin	{special svarita vowels}					case I^ of					skta: 						write(O, hindsvaritaa);					skti: 						write(O, hindsvaritai);					sktu: 						write(O, hindsvaritau);					skte: 						write(O, hindsvaritae);					skto: 						write(O, hindsvaritao);					sktai: 						write(O, hindsvaritaa, hindi);					sktau: 						write(O, hindsvaritaa, hindu);					end;	{case}					get(I);					cycle;					end	{special svarita vowels}				else if I^ in Longvowels + [sktri, sktlri] then					write(O, hindsvarita)	{write the accent then procede to case statement for the following vowel}				else begin {svarita followed by nonvowel!}					Error := 2;					exit(tSktHind);					end;				end;	{sktsvarita}		case I^ of		sktnasalization: 			begin			write(O, hindanunasika);			write('Nasalization does not exist in the Hindustan font.');			write('An anunasika preceding the nasalized sound has been written in its place.');			end;{aic}		sktai: 			write(O, hinda, hindi);		sktau: 			write(O, hinda, hindu);{aspirated stop}		sktkh: 			write(O, hindk, hindh);		sktgh: 			write(O, hindg, hindh);		sktch: 			write(O, hindc, hindh);		sktjh: 			write(O, hindj, hindh);		sktretroth: 			write(O, hindretrot, hindh);		sktretrodh: 			write(O, hindretrod, hindh);		sktth: 			write(O, hindt, hindh);		sktdh: 			write(O, hindd, hindh);		sktph: 			write(O, hindp, hindh);		sktbh: 			write(O, hindb, hindh);{jihvamuliya, upadhmaniya}		sktjihvamuliya: 			write(O, hindX, hindk);		sktupadhmaniya: 			write(O, hindX, hindp);{simple characters}		skta: 			write(O, hinda);		sktaa: 			write(O, hindaa);		skti: 			write(O, hindi);		sktii: 			write(O, hindii);		sktu: 			write(O, hindu);		sktuu: 			write(O, hinduu);		sktri: 			write(O, hindri);		sktrii: 			write(O, hindrii);		sktlri: 			write(O, hindlri);		sktlrii: 			begin			write(O, hindlri);			write('Long vocalic l does not exist in the Hindustan font; short vocalic l has been written in its place');			end;		skte: 			write(O, hinde);		skto: 			write(O, hindo);		sktvisarga: 			write(O, hindvisarga);		sktanusvara: 			write(O, hindanusvara);		sktanunasika: 			write(O, hindanunasika);		sktavagraha: 			write(O, hindavagraha);		sktroot: 			write(O, hindroot);		sktk: 			write(O, hindk);		sktg: 			write(O, hindg);		sktkn: 			write(O, hindkn);		sktc: 			write(O, hindc);		sktj: 			write(O, hindj);		sktcn: 			write(O, hindcn);		sktretrot: 			write(O, hindretrot);		sktretrod: 			write(O, hindretrod);		sktretron: 			write(O, hindretron);		sktt: 			write(O, hindt);		sktd: 			write(O, hindd);		sktn: 			write(O, hindn);		sktp: 			write(O, hindp);		sktb: 			write(O, hindb);		sktm: 			write(O, hindm);		skty: 			write(O, hindy);		sktr: 			write(O, hindr);		sktl: 			write(O, hindl);		sktv: 			write(O, hindv);		sktsch: 			write(O, hindsch);		sktsh: 			write(O, hindsh);		skts: 			write(O, hinds);		skth: 			write(O, hindh);		otherwise			write(O, I^)	{if the character is not in the table write it out as it came in}		end;	{case}		get(I);		end;	{loop}	end;	{tSktHind}end.	{transliterate}